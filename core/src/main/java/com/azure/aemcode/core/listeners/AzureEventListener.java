package com.azure.aemcode.core.listeners;

import javax.jcr.LoginException;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.observation.Event;
import javax.jcr.observation.EventIterator;
import javax.jcr.observation.EventListener;
import javax.jcr.observation.ObservationManager;

import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Deactivate;
import org.apache.felix.scr.annotations.Modified;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import org.apache.sling.jcr.api.SlingRepository;
import org.osgi.service.component.ComponentContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 * Note: For event Listener which listens to node events, the listener should be
 * registered in OSGI in activate method one time.
 * 
 * And, Note that the session used to register the listener should logout in
 * deactivate method otherwise the session will be live for eternity till the server is shut-down.
 * 
 *
 *
 */
@Component
@Service
public class AzureEventListener implements EventListener {

	@Reference
	SlingRepository repository;

	private Session listenerSession = null;
	private Logger log = LoggerFactory.getLogger(getClass());

	@Override
	public void onEvent(EventIterator events) {
		try {

			// Iterate through the events and process.
			while (events.hasNext()) {
				Event nextEvent = events.nextEvent();
				log.debug("Event generated on path: {}", nextEvent.getPath());
				log.debug("Event Type : {}", nextEvent.getType());
				log.debug("Event generated by user: {}", nextEvent.getUserID());
			}
		} catch (RepositoryException e) {
			log.error("Exception while processing events: ", e);
		}

	}

	@Activate
	@Modified
	protected void activate(ComponentContext context) {
		try {

			// getting session to activate the listener. Login service is used
			// when the default user is created in "Sling User Mapper Service"
			// in OSGI configurations.
			listenerSession = repository.loginService(null, null);

			// get the observation manager
			ObservationManager observationManager = listenerSession.getWorkspace().getObservationManager();

			// add the event listener
			observationManager.addEventListener(this, Event.NODE_ADDED, "/content/dam/aem-code/images", true, null, null, false);
		} catch (LoginException e) {
			log.error("Exception in event listener: ", e);
		} catch (RepositoryException e) {
			log.error("Exception in event listener: ", e);
		}
	}

	@Deactivate
	protected void deactivate() {
		if (null != listenerSession && listenerSession.isLive()) {
			listenerSession.logout();
		}
	}

}
